(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! ptr) (set! front-ptr ptr))
    (define (set-rear-ptr! ptr) (set! rear-ptr ptr))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
        (error "FRONT called with an empty queue")
        (car front-ptr)))
    (define (print-queue)
      (if (empty-queue?)
        #f
        (print-queue-iter front-ptr)))
    (define (print-queue-iter fptr)
      (print (car fptr))
      (if (eq? fptr rear-ptr) #t
        (print-queue-iter (cdr fptr))))
    (define (insert-queue! obj)
      (let ((new-pair (cons obj '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
                (set-cdr! rear-ptr new-pair)
                (set-rear-ptr! new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" queue))
            (else
              (set-front-ptr! (cdr front-ptr)))))
    (define (dispatch m)
      (cond 
        ((eq? m 'front-ptr) front-ptr)
        ((eq? m 'rear-ptr) rear-ptr)
        ((eq? m 'empty-queue?) empty-queue?)
        ((eq? m 'print-queue) print-queue)
        ((eq? m 'front-queue) front-queue)
        ((eq? m 'set-front-ptr!) set-front-ptr)
        ((eq? m 'set-rear-ptr!) set-rear-ptr)
        ((eq? m 'insert-queue!) insert-queue!)
        ((eq? m 'delete-queue!) delete-queue!)
        (else (error "Undefined Opration -- queue:" m))))
    dispatch))

(define (front-ptr z) (z 'front-ptr))
(define (rear-ptr z) (z 'rear-ptr))
(define (empty-queue? z) ((z 'empty-queue?)))
(define (print-queue z) ((z 'print-queue)))
(define (set-front-ptr! z ptr) 
  ((z 'set-front-ptr!) ptr))
(define (set-rear-ptr z ptr) 
  ((z 'set-rear-ptr!) ptr))
(define (set-front-queue! z obj)
  ((z 'set-front-queue!) obj))
(define (set-rear-queue! z obj) 
  ((z 'set-rear-queue!) obj))
(define (insert-queue! z obj) 
  ((z 'insert-queue!) obj))
(define (delete-queue! z) ((z 'delete-queue!)))

(define q1 (make-queue))
(insert-queue! q1 'a)
(insert-queue! q1 'b)
(delete-queue! q1)
(delete-queue! q1)

(print-queue q1)
